// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/user/usecase/interface_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "pinterest/pkg/models"
	reflect "reflect"
)

// MockIUserUsecase is a mock of IUserUsecase interface
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockIUserUsecase) Add(user *models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockIUserUsecaseMockRecorder) Add(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIUserUsecase)(nil).Add), user)
}

// GetById mocks base method
func (m *MockIUserUsecase) GetById(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockIUserUsecaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIUserUsecase)(nil).GetById), id)
}

// GetByLogin mocks base method
func (m *MockIUserUsecase) GetByLogin(login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin
func (mr *MockIUserUsecaseMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIUserUsecase)(nil).GetByLogin), login)
}

// Update mocks base method
func (m *MockIUserUsecase) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIUserUsecaseMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserUsecase)(nil).Update), user)
}

// Delete mocks base method
func (m *MockIUserUsecase) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIUserUsecaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserUsecase)(nil).Delete), id)
}

// ComparePassword mocks base method
func (m *MockIUserUsecase) ComparePassword(user *models.User, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", user, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword
func (mr *MockIUserUsecaseMockRecorder) ComparePassword(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockIUserUsecase)(nil).ComparePassword), user, password)
}

// CheckLogin mocks base method
func (m *MockIUserUsecase) CheckLogin(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLogin indicates an expected call of CheckLogin
func (mr *MockIUserUsecaseMockRecorder) CheckLogin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockIUserUsecase)(nil).CheckLogin), user)
}

// CheckEmail mocks base method
func (m *MockIUserUsecase) CheckEmail(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEmail indicates an expected call of CheckEmail
func (mr *MockIUserUsecaseMockRecorder) CheckEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockIUserUsecase)(nil).CheckEmail), user)
}

// SaveAvatar mocks base method
func (m *MockIUserUsecase) SaveAvatar(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatar indicates an expected call of SaveAvatar
func (mr *MockIUserUsecaseMockRecorder) SaveAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockIUserUsecase)(nil).SaveAvatar), user)
}
