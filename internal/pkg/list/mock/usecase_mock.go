// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/list/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "2020_1_Color_noise/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// GetMainList mocks base method
func (m *MockIUsecase) GetMainList(start, limit int) ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainList", start, limit)
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainList indicates an expected call of GetMainList
func (mr *MockIUsecaseMockRecorder) GetMainList(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainList", reflect.TypeOf((*MockIUsecase)(nil).GetMainList), start, limit)
}

// GetSubList mocks base method
func (m *MockIUsecase) GetSubList(id uint, start, limit int) ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubList", id, start, limit)
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubList indicates an expected call of GetSubList
func (mr *MockIUsecaseMockRecorder) GetSubList(id, start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubList", reflect.TypeOf((*MockIUsecase)(nil).GetSubList), id, start, limit)
}

// GetRecommendationList mocks base method
func (m *MockIUsecase) GetRecommendationList(id uint, start, limit int) ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationList", id, start, limit)
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationList indicates an expected call of GetRecommendationList
func (mr *MockIUsecaseMockRecorder) GetRecommendationList(id, start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationList", reflect.TypeOf((*MockIUsecase)(nil).GetRecommendationList), id, start, limit)
}
