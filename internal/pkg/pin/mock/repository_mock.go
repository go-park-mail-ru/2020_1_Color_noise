// Code generated by MockGen. DO NOT EDIT.
// Source: ./pin/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "2020_1_Color_noise/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIRepository) Create(pin *models.Pin) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pin)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIRepositoryMockRecorder) Create(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), pin)
}

// Save mocks base method
func (m *MockIRepository) Save(pinId, boardId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", pinId, boardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIRepositoryMockRecorder) Save(pinId, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository)(nil).Save), pinId, boardId)
}

// GetByID mocks base method
func (m *MockIRepository) GetByID(id uint) (*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockIRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepository)(nil).GetByID), id)
}

// GetByUserID mocks base method
func (m *MockIRepository) GetByUserID(userId uint, start, limit int) ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userId, start, limit)
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID
func (mr *MockIRepositoryMockRecorder) GetByUserID(userId, start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockIRepository)(nil).GetByUserID), userId, start, limit)
}

// GetByName mocks base method
func (m *MockIRepository) GetByName(name string, start, limit int, date string, desc bool, most string) ([]*models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name, start, limit, date, desc, most)
	ret0, _ := ret[0].([]*models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockIRepositoryMockRecorder) GetByName(name, start, limit, date, desc, most interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIRepository)(nil).GetByName), name, start, limit, date, desc, most)
}

// Update mocks base method
func (m *MockIRepository) Update(pin *models.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIRepositoryMockRecorder) Update(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), pin)
}

// Delete mocks base method
func (m *MockIRepository) Delete(pinId, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", pinId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIRepositoryMockRecorder) Delete(pinId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), pinId, userId)
}

// AddTags mocks base method
func (m *MockIRepository) AddTags(pinId uint, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", pinId, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTags indicates an expected call of AddTags
func (mr *MockIRepositoryMockRecorder) AddTags(pinId, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockIRepository)(nil).AddTags), pinId, tags)
}
