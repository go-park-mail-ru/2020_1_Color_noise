// Code generated by MockGen. DO NOT EDIT.
// Source: ./session.pb.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	session "2020_1_Color_noise/internal/pkg/proto/session"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthSeviceClient is a mock of AuthSeviceClient interface
type MockAuthSeviceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSeviceClientMockRecorder
}

// MockAuthSeviceClientMockRecorder is the mock recorder for MockAuthSeviceClient
type MockAuthSeviceClientMockRecorder struct {
	mock *MockAuthSeviceClient
}

// NewMockAuthSeviceClient creates a new mock instance
func NewMockAuthSeviceClient(ctrl *gomock.Controller) *MockAuthSeviceClient {
	mock := &MockAuthSeviceClient{ctrl: ctrl}
	mock.recorder = &MockAuthSeviceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthSeviceClient) EXPECT() *MockAuthSeviceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAuthSeviceClient) Create(ctx context.Context, in *session.UserID, opts ...grpc.CallOption) (*session.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAuthSeviceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthSeviceClient)(nil).Create), varargs...)
}

// Login mocks base method
func (m *MockAuthSeviceClient) Login(ctx context.Context, in *session.SignIn, opts ...grpc.CallOption) (*session.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthSeviceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthSeviceClient)(nil).Login), varargs...)
}

// GetByCookie mocks base method
func (m *MockAuthSeviceClient) GetByCookie(ctx context.Context, in *session.Cookie, opts ...grpc.CallOption) (*session.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCookie", varargs...)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCookie indicates an expected call of GetByCookie
func (mr *MockAuthSeviceClientMockRecorder) GetByCookie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCookie", reflect.TypeOf((*MockAuthSeviceClient)(nil).GetByCookie), varargs...)
}

// Update mocks base method
func (m *MockAuthSeviceClient) Update(ctx context.Context, in *session.Session, opts ...grpc.CallOption) (*session.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*session.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockAuthSeviceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthSeviceClient)(nil).Update), varargs...)
}

// Delete mocks base method
func (m *MockAuthSeviceClient) Delete(ctx context.Context, in *session.Cookie, opts ...grpc.CallOption) (*session.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*session.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockAuthSeviceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthSeviceClient)(nil).Delete), varargs...)
}

// MockAuthSeviceServer is a mock of AuthSeviceServer interface
type MockAuthSeviceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSeviceServerMockRecorder
}

// MockAuthSeviceServerMockRecorder is the mock recorder for MockAuthSeviceServer
type MockAuthSeviceServerMockRecorder struct {
	mock *MockAuthSeviceServer
}

// NewMockAuthSeviceServer creates a new mock instance
func NewMockAuthSeviceServer(ctrl *gomock.Controller) *MockAuthSeviceServer {
	mock := &MockAuthSeviceServer{ctrl: ctrl}
	mock.recorder = &MockAuthSeviceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthSeviceServer) EXPECT() *MockAuthSeviceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAuthSeviceServer) Create(arg0 context.Context, arg1 *session.UserID) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAuthSeviceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthSeviceServer)(nil).Create), arg0, arg1)
}

// Login mocks base method
func (m *MockAuthSeviceServer) Login(arg0 context.Context, arg1 *session.SignIn) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthSeviceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthSeviceServer)(nil).Login), arg0, arg1)
}

// GetByCookie mocks base method
func (m *MockAuthSeviceServer) GetByCookie(arg0 context.Context, arg1 *session.Cookie) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCookie", arg0, arg1)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCookie indicates an expected call of GetByCookie
func (mr *MockAuthSeviceServerMockRecorder) GetByCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCookie", reflect.TypeOf((*MockAuthSeviceServer)(nil).GetByCookie), arg0, arg1)
}

// Update mocks base method
func (m *MockAuthSeviceServer) Update(arg0 context.Context, arg1 *session.Session) (*session.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*session.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockAuthSeviceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthSeviceServer)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *MockAuthSeviceServer) Delete(arg0 context.Context, arg1 *session.Cookie) (*session.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*session.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockAuthSeviceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthSeviceServer)(nil).Delete), arg0, arg1)
}
