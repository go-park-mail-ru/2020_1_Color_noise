// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecode20201ColorNoiseInternalModels(in *jlexer.Lexer, out *ResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_send":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(ResponseUser)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels1(in, out.SendUser)
			}
		case "user_rec":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(ResponseUser)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels1(in, out.RecUser)
			}
		case "message":
			out.Message = string(in.String())
		case "stickers":
			out.Stickers = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels(out *jwriter.Writer, in ResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_send\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels1(out, *in.SendUser)
		}
	}
	{
		const prefix string = ",\"user_rec\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels1(out, *in.RecUser)
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncode20201ColorNoiseInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncode20201ColorNoiseInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecode20201ColorNoiseInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecode20201ColorNoiseInternalModels(l, v)
}
func easyjson4086215fDecode20201ColorNoiseInternalModels1(in *jlexer.Lexer, out *ResponseUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "about":
			out.About = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "subscriptions":
			out.Subscriptions = int(in.Int())
		case "subscribers":
			out.Subscribers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels1(out *jwriter.Writer, in ResponseUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		out.Int(int(in.Subscriptions))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	out.RawByte('}')
}
func easyjson4086215fDecode20201ColorNoiseInternalModels2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SendUser":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(User)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels3(in, out.SendUser)
			}
		case "RecUser":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(User)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels3(in, out.RecUser)
			}
		case "Message":
			out.Message = string(in.String())
		case "Stickers":
			out.Stickers = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SendUser\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels3(out, *in.SendUser)
		}
	}
	{
		const prefix string = ",\"RecUser\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels3(out, *in.RecUser)
		}
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncode20201ColorNoiseInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncode20201ColorNoiseInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecode20201ColorNoiseInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecode20201ColorNoiseInternalModels2(l, v)
}
func easyjson4086215fDecode20201ColorNoiseInternalModels3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "Email":
			out.Email = string(in.String())
		case "Login":
			out.Login = string(in.String())
		case "EncryptedPassword":
			out.EncryptedPassword = string(in.String())
		case "About":
			out.About = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		case "Subscriptions":
			out.Subscriptions = int(in.Int())
		case "Subscribers":
			out.Subscribers = int(in.Int())
		case "Preferences":
			if in.IsNull() {
				in.Skip()
				out.Preferences = nil
			} else {
				in.Delim('[')
				if out.Preferences == nil {
					if !in.IsDelim(']') {
						out.Preferences = make([]string, 0, 4)
					} else {
						out.Preferences = []string{}
					}
				} else {
					out.Preferences = (out.Preferences)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Preferences = append(out.Preferences, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Tags = append(out.Tags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"EncryptedPassword\":"
		out.RawString(prefix)
		out.String(string(in.EncryptedPassword))
	}
	{
		const prefix string = ",\"About\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"Subscriptions\":"
		out.RawString(prefix)
		out.Int(int(in.Subscriptions))
	}
	{
		const prefix string = ",\"Subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"Preferences\":"
		out.RawString(prefix)
		if in.Preferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Preferences {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tags {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson4086215fDecode20201ColorNoiseInternalModels4(in *jlexer.Lexer, out *InputMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserRecviredId = uint(in.Uint())
		case "message":
			out.Message = string(in.String())
		case "stickers":
			out.Stickers = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels4(out *jwriter.Writer, in InputMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserRecviredId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncode20201ColorNoiseInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncode20201ColorNoiseInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecode20201ColorNoiseInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecode20201ColorNoiseInternalModels4(l, v)
}
func easyjson4086215fDecode20201ColorNoiseInternalModels5(in *jlexer.Lexer, out *DMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SendUser":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(User)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels3(in, out.SendUser)
			}
		case "RecUser":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(User)
				}
				easyjson4086215fDecode20201ColorNoiseInternalModels3(in, out.RecUser)
			}
		case "Message":
			easyjson4086215fDecodeDatabaseSql(in, &out.Message)
		case "Stickers":
			easyjson4086215fDecodeDatabaseSql(in, &out.Stickers)
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncode20201ColorNoiseInternalModels5(out *jwriter.Writer, in DMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SendUser\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels3(out, *in.SendUser)
		}
	}
	{
		const prefix string = ",\"RecUser\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			easyjson4086215fEncode20201ColorNoiseInternalModels3(out, *in.RecUser)
		}
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		easyjson4086215fEncodeDatabaseSql(out, in.Message)
	}
	{
		const prefix string = ",\"Stickers\":"
		out.RawString(prefix)
		easyjson4086215fEncodeDatabaseSql(out, in.Stickers)
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncode20201ColorNoiseInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncode20201ColorNoiseInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecode20201ColorNoiseInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecode20201ColorNoiseInternalModels5(l, v)
}
func easyjson4086215fDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
