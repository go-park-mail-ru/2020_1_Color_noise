// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecode20201ColorNoiseInternalModels(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "Email":
			out.Email = string(in.String())
		case "Login":
			out.Login = string(in.String())
		case "EncryptedPassword":
			out.EncryptedPassword = string(in.String())
		case "About":
			out.About = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		case "Subscriptions":
			out.Subscriptions = int(in.Int())
		case "Subscribers":
			out.Subscribers = int(in.Int())
		case "Preferences":
			if in.IsNull() {
				in.Skip()
				out.Preferences = nil
			} else {
				in.Delim('[')
				if out.Preferences == nil {
					if !in.IsDelim(']') {
						out.Preferences = make([]string, 0, 4)
					} else {
						out.Preferences = []string{}
					}
				} else {
					out.Preferences = (out.Preferences)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Preferences = append(out.Preferences, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Tags = append(out.Tags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"EncryptedPassword\":"
		out.RawString(prefix)
		out.String(string(in.EncryptedPassword))
	}
	{
		const prefix string = ",\"About\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"Subscriptions\":"
		out.RawString(prefix)
		out.Int(int(in.Subscriptions))
	}
	{
		const prefix string = ",\"Subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"Preferences\":"
		out.RawString(prefix)
		if in.Preferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Preferences {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tags {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels1(in *jlexer.Lexer, out *UpdateProfileInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels1(out *jwriter.Writer, in UpdateProfileInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProfileInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProfileInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProfileInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProfileInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels1(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels2(in *jlexer.Lexer, out *UpdatePin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.BoardId = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels2(out *jwriter.Writer, in UpdatePin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BoardId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels2(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels3(in *jlexer.Lexer, out *UpdatePasswordInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels3(out *jwriter.Writer, in UpdatePasswordInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix[1:])
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePasswordInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePasswordInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePasswordInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePasswordInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels3(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels4(in *jlexer.Lexer, out *UpdateDescriptionInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels4(out *jwriter.Writer, in UpdateDescriptionInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateDescriptionInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateDescriptionInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateDescriptionInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateDescriptionInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels4(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels5(in *jlexer.Lexer, out *SignUpInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels5(out *jwriter.Writer, in SignUpInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUpInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUpInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUpInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUpInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels5(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels6(in *jlexer.Lexer, out *SignInInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels6(out *jwriter.Writer, in SignInInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignInInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignInInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignInInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignInInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels6(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels7(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "Cookie":
			out.Cookie = string(in.String())
		case "Token":
			out.Token = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "DeletingAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletingAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels7(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"Cookie\":"
		out.RawString(prefix)
		out.String(string(in.Cookie))
	}
	{
		const prefix string = ",\"Token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletingAt\":"
		out.RawString(prefix)
		out.Raw((in.DeletingAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels7(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels8(in *jlexer.Lexer, out *ResponseUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "about":
			out.About = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "subscriptions":
			out.Subscriptions = int(in.Int())
		case "subscribers":
			out.Subscribers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels8(out *jwriter.Writer, in ResponseUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		out.Int(int(in.Subscriptions))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels8(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels9(in *jlexer.Lexer, out *ResponsePin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "board_id":
			out.BoardId = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels9(out *jwriter.Writer, in ResponsePin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.BoardId != 0 {
		const prefix string = ",\"board_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.BoardId))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponsePin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponsePin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponsePin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponsePin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels9(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels10(in *jlexer.Lexer, out *ResponseNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels10(out *jwriter.Writer, in ResponseNotification) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels10(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels11(in *jlexer.Lexer, out *ResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_send":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(ResponseUser)
				}
				(*out.SendUser).UnmarshalEasyJSON(in)
			}
		case "user_rec":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(ResponseUser)
				}
				(*out.RecUser).UnmarshalEasyJSON(in)
			}
		case "message":
			out.Message = string(in.String())
		case "stickers":
			out.Stickers = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels11(out *jwriter.Writer, in ResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_send\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			(*in.SendUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"user_rec\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			(*in.RecUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels11(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels12(in *jlexer.Lexer, out *ResponseComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "pin_id":
			out.PindId = uint(in.Uint())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "comment":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels12(out *jwriter.Writer, in ResponseComment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.PindId != 0 {
		const prefix string = ",\"pin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.PindId))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Text != "" {
		const prefix string = ",\"comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels12(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels13(in *jlexer.Lexer, out *ResponseBoard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "user_id":
			out.UserId = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "pins":
			if in.IsNull() {
				in.Skip()
				out.Pins = nil
			} else {
				in.Delim('[')
				if out.Pins == nil {
					if !in.IsDelim(']') {
						out.Pins = make([]*ResponsePin, 0, 8)
					} else {
						out.Pins = []*ResponsePin{}
					}
				} else {
					out.Pins = (out.Pins)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *ResponsePin
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(ResponsePin)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Pins = append(out.Pins, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_pin":
			if in.IsNull() {
				in.Skip()
				out.LastPin = nil
			} else {
				if out.LastPin == nil {
					out.LastPin = new(ResponsePin)
				}
				(*out.LastPin).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels13(out *jwriter.Writer, in ResponseBoard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	if in.UserId != 0 {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Pins) != 0 {
		const prefix string = ",\"pins\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Pins {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.LastPin != nil {
		const prefix string = ",\"last_pin\":"
		out.RawString(prefix)
		(*in.LastPin).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseBoard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseBoard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseBoard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseBoard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels13(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels14(in *jlexer.Lexer, out *Pin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "BoardId":
			out.BoardId = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Image":
			out.Image = string(in.String())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Tags = append(out.Tags, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Views":
			out.Views = uint(in.Uint())
		case "Comment":
			out.Comment = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels14(out *jwriter.Writer, in Pin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"BoardId\":"
		out.RawString(prefix)
		out.Uint(uint(in.BoardId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Tags {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Views\":"
		out.RawString(prefix)
		out.Uint(uint(in.Views))
	}
	{
		const prefix string = ",\"Comment\":"
		out.RawString(prefix)
		out.Uint(uint(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels14(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels15(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "User":
			(out.User).UnmarshalEasyJSON(in)
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels15(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels15(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels16(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SendUser":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(User)
				}
				(*out.SendUser).UnmarshalEasyJSON(in)
			}
		case "RecUser":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(User)
				}
				(*out.RecUser).UnmarshalEasyJSON(in)
			}
		case "Message":
			out.Message = string(in.String())
		case "Stickers":
			out.Stickers = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels16(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SendUser\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			(*in.SendUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"RecUser\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			(*in.RecUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels16(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels17(in *jlexer.Lexer, out *InputPin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.BoardId = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels17(out *jwriter.Writer, in InputPin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BoardId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputPin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputPin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputPin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputPin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels17(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels18(in *jlexer.Lexer, out *InputMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserRecviredId = uint(in.Uint())
		case "message":
			out.Message = string(in.String())
		case "stickers":
			out.Stickers = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels18(out *jwriter.Writer, in InputMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserRecviredId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		out.String(string(in.Stickers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels18(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels19(in *jlexer.Lexer, out *InputComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pin_id":
			out.PinId = uint(in.Uint())
		case "comment":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels19(out *jwriter.Writer, in InputComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PinId))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels19(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels20(in *jlexer.Lexer, out *InputBoard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels20(out *jwriter.Writer, in InputBoard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputBoard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputBoard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputBoard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputBoard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels20(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels21(in *jlexer.Lexer, out *DataBaseUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "Email":
			out.Email = string(in.String())
		case "Login":
			out.Login = string(in.String())
		case "EncryptedPassword":
			out.EncryptedPassword = string(in.String())
		case "About":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.About)
		case "Avatar":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Avatar)
		case "Subscriptions":
			out.Subscriptions = int(in.Int())
		case "Subscribers":
			out.Subscribers = int(in.Int())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Tags = append(out.Tags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels21(out *jwriter.Writer, in DataBaseUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"EncryptedPassword\":"
		out.RawString(prefix)
		out.String(string(in.EncryptedPassword))
	}
	{
		const prefix string = ",\"About\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.About)
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Avatar)
	}
	{
		const prefix string = ",\"Subscriptions\":"
		out.RawString(prefix)
		out.Int(int(in.Subscriptions))
	}
	{
		const prefix string = ",\"Subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Tags {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBaseUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBaseUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBaseUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBaseUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels21(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels22(in *jlexer.Lexer, out *DataBaseSession) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "Cookie":
			out.Cookie = string(in.String())
		case "Token":
			out.Token = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "DeletingAt":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.DeletingAt)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels22(out *jwriter.Writer, in DataBaseSession) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"Cookie\":"
		out.RawString(prefix)
		out.String(string(in.Cookie))
	}
	{
		const prefix string = ",\"Token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletingAt\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.DeletingAt)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBaseSession) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBaseSession) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBaseSession) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBaseSession) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels22(l, v)
}
func easyjsonD2b7633eDecodeDatabaseSql1(in *jlexer.Lexer, out *sql.NullTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDatabaseSql1(out *jwriter.Writer, in sql.NullTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels23(in *jlexer.Lexer, out *DataBasePin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "UserId":
			out.UserId = uint(in.Uint())
		case "BoardId":
			out.BoardId = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Description)
		case "Image":
			out.Image = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			easyjsonD2b7633eDecodeDatabaseSql1(in, &out.UpdatedAt)
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Tags = append(out.Tags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Views":
			out.Views = uint(in.Uint())
		case "Comment":
			out.Comment = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels23(out *jwriter.Writer, in DataBasePin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"BoardId\":"
		out.RawString(prefix)
		out.Uint(uint(in.BoardId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Description)
	}
	{
		const prefix string = ",\"Image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql1(out, in.UpdatedAt)
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Tags {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Views\":"
		out.RawString(prefix)
		out.Uint(uint(in.Views))
	}
	{
		const prefix string = ",\"Comment\":"
		out.RawString(prefix)
		out.Uint(uint(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBasePin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBasePin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBasePin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBasePin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels23(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels24(in *jlexer.Lexer, out *DataBaseComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "UserId":
			out.UserId = uint(in.Uint())
		case "PinId":
			out.PinId = uint(in.Uint())
		case "Text":
			out.Text = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels24(out *jwriter.Writer, in DataBaseComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"PinId\":"
		out.RawString(prefix)
		out.Uint(uint(in.PinId))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBaseComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBaseComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBaseComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBaseComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels24(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels25(in *jlexer.Lexer, out *DataBaseBoard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "UserId":
			out.UserId = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Description)
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels25(out *jwriter.Writer, in DataBaseBoard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Description)
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataBaseBoard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataBaseBoard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataBaseBoard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataBaseBoard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels25(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels26(in *jlexer.Lexer, out *DMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SendUser":
			if in.IsNull() {
				in.Skip()
				out.SendUser = nil
			} else {
				if out.SendUser == nil {
					out.SendUser = new(User)
				}
				(*out.SendUser).UnmarshalEasyJSON(in)
			}
		case "RecUser":
			if in.IsNull() {
				in.Skip()
				out.RecUser = nil
			} else {
				if out.RecUser == nil {
					out.RecUser = new(User)
				}
				(*out.RecUser).UnmarshalEasyJSON(in)
			}
		case "Message":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Message)
		case "Stickers":
			easyjsonD2b7633eDecodeDatabaseSql(in, &out.Stickers)
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels26(out *jwriter.Writer, in DMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SendUser\":"
		out.RawString(prefix[1:])
		if in.SendUser == nil {
			out.RawString("null")
		} else {
			(*in.SendUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"RecUser\":"
		out.RawString(prefix)
		if in.RecUser == nil {
			out.RawString("null")
		} else {
			(*in.RecUser).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Message)
	}
	{
		const prefix string = ",\"Stickers\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeDatabaseSql(out, in.Stickers)
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels26(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels27(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "PinId":
			out.PinId = uint(in.Uint())
		case "Text":
			out.Text = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels27(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"PinId\":"
		out.RawString(prefix)
		out.Uint(uint(in.PinId))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels27(l, v)
}
func easyjsonD2b7633eDecode20201ColorNoiseInternalModels28(in *jlexer.Lexer, out *Board) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint(in.Uint())
		case "UserId":
			out.UserId = uint(in.Uint())
		case "Pins":
			if in.IsNull() {
				in.Skip()
				out.Pins = nil
			} else {
				in.Delim('[')
				if out.Pins == nil {
					if !in.IsDelim(']') {
						out.Pins = make([]*Pin, 0, 8)
					} else {
						out.Pins = []*Pin{}
					}
				} else {
					out.Pins = (out.Pins)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Pin
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Pin)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Pins = append(out.Pins, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "LastPin":
			(out.LastPin).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20201ColorNoiseInternalModels28(out *jwriter.Writer, in Board) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"Pins\":"
		out.RawString(prefix)
		if in.Pins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Pins {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"LastPin\":"
		out.RawString(prefix)
		(in.LastPin).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Board) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Board) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20201ColorNoiseInternalModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Board) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Board) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20201ColorNoiseInternalModels28(l, v)
}
