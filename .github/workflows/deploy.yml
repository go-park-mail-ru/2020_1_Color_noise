name: Zinterest build

on:
  push:
    branches: [ develop ]

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.26

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: build tests DATABASE
        run: docker build -t db --file `pwd`/build/db.Dockerfile . && docker run -d -p 5432:5432 db
      - name: RUN TESTS
        run: go mod tidy && go test ./... &&

  build:
    runs-on: ubuntu-latest
    #needs: tests
    steps:
      - uses: actions/checkout@v1
      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build Docker Images
        run: docker-compose build
      - name: Push Docker Image
        run: docker-compose push main auth chat user image predictions
      - name: Fill env file
        run: echo "GITHUB_SHA=$GITHUB_SHA" >> .env
      - name: Upload nginx config result
        uses: actions/upload-artifact@v2
        with:
          name: config
          path: ./server/nginx/nginx.conf
      - name: Upload docker-compose result
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: ./docker-compose.yml
      - name: Upload env result
        uses: actions/upload-artifact@v2
        with:
          name: env
          path: ./.env
      - name: Upload prometheus file
        uses: actions/upload-artifact@v2
        with:
          name: prometheus
          path: ./prometheus.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download docker configs
        uses: actions/download-artifact@v1
        with:
          name: docker
      - name: Transfer docker file to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "docker/docker-compose.yml"
          target: "/home/ubuntu/2020_1_Color_noise"
          strip_components: 1
      - name: Download configs
        uses: actions/download-artifact@v1
        with:
          name: config
      - name: Transfer nginx file to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "config/nginx.conf"
          target: "/home/ubuntu/2020_1_Color_noise/server/nginx"
          strip_components: 1
      - name: Download env
        uses: actions/download-artifact@v1
        with:
          name: env
      - name: Transfer env file to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "env/.env"
          target: "/home/ubuntu/2020_1_Color_noise"
          strip_components: 1
      - name: Download prometheus
        uses: actions/download-artifact@v1
        with:
          name: prometheus
      - name: Transfer prometheus file to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "prometheus/prometheus.yml"
          target: "/home/ubuntu/2020_1_Color_noise"
          strip_components: 1
      - name: delete docker image
        uses: appleboy/ssh-action@master
        with:
          envs: GITHUB_SHA
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: cd 2020_1_Color_noise && sudo docker-compose stop && sudo docker-compose rm -f image && sudo docker-compose rm -f main && sudo docker-compose rm -f auth && sudo docker-compose rm -f chat && sudo docker-compose rm -f user && sudo docker rmi $(sudo docker images -a | grep "zinterest" | awk '{print $3}')
      - name: deploy docker image
        uses: appleboy/ssh-action@master
        with:
          envs: GITHUB_SHA
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: cd 2020_1_Color_noise && sudo docker-compose pull && sudo docker-compose up -d